Abstract Factory Design Pattern

The Abstract Factory Pattern is a creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes.

It is useful when a system needs to be independent of how its objects are created, composed, and represented. This pattern promotes consistency among products within a family and ensures that incompatible products are not used together.

The main idea is to use a factory of factories. Each concrete factory implements an interface that produces a set of related objects. The client code only interacts with the interfaces and not with the specific implementations.

Key Components:
- AbstractFactory: Declares interfaces for creating abstract products.
- ConcreteFactory: Implements creation methods for specific product variants.
- AbstractProduct: Declares interfaces for a set of products.
- ConcreteProduct: Implements the abstract product interfaces.
- Client: Uses the AbstractFactory and works only with product interfaces.

Real-World Analogy:
Think of a furniture showroom offering modern and Victorian styles. Each style has its own factory (ModernFurnitureFactory, VictorianFurnitureFactory), which produces related products like chairs, sofas, and tables in that style.

Usage Scenarios:
- When your code needs to work with various families of related objects.
- When you want to enforce consistency among products used together.
- When you need to decouple code from specific classes of products.

Benefits:
- Enforces a consistent interface for related products.
- Promotes separation of concerns and increases flexibility.
- Makes it easier to switch product families at runtime.

Limitations:
- Adding new product families can be difficult as it requires changing the abstract factory interface.
